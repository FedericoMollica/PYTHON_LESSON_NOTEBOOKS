# -*- coding: utf-8 -*-
"""Lesson_Boolean_adv_Lists_FM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1seVwnsfQFz_eQBsr24v-3F6dPr57BA78
"""

'''

#XXXXXXX  LEZIONE SU BOOLEAN  XXXXXXX

'''

type()
#codice base per conoscere la natura di un elemento.

type('microsoft')
#result:
#str

type(4)
#result:
#int

type(True)
#result:
#bool

a = 3
b = 1

if a > b:
  print('a is grater than b')

#result:
#a is grater than b

if True:
  print('a is grater than b')

boolean_value = a > b
print(boolean_value)
#result:
#a is grater than b
#True

if boolean_value:
  print('a is grater than b')
#result:
#a is grater than b

def are_you_sad(is_rainy, has_umbrella):
  if is_rainy ==  True and has_umbrella == False:
    return True
  else:
    return False 
#codice complesso con condizioni, boolean e cicli
#leggo (definisci 'sono triste' con elementi 'sta piovendo', 'ho l'ombrello)
#se 'sta piovendo' è vera e non 'ho l'ombrello' è falsa
#ritorna 'vero', altrimenti ritorna 'falso' 

def are_you_sad(is_rainy, has_umbrella):
  return is_rainy and not has_umbrella
#super semplificazione del codice di prima
#leggo (definisci 'sono triste' con elementi 'sta piovendo', 'ho l'ombrello)
#ritorna quando ('sta piovendo' e non 'ho l'ombrello)

are_you_sad(True, False)
#leggo('sei triste', elemento 'vero' riferito a 'sta piovendo e 'falso' riferito ha 'ho l'ombrello)

#result:
#True

are_you_sad(True, True)
#result:
#False


are_you_sad(False, False)
#result:
#False

are_you_sad(False, True)
#result:
#False

#risulta 'vero' 'sono triste' solo quando 'sta piovendo' è 'vero' e 'ho l'ombrello' è falso.


'''
#XXX  ESERCIZIO  XXX
'''

#crea un codice per definire 'c_greater_than_d_plus_e' 'vero' se 'c' è > di 'd' + 'e'
#definire 'c_greater_than_d_plus_e' 'falso' se 'c' è < di 'd' + 'e'

c = 5
d = 3
e = 1

def c_greater_than_d_plus_e(c, d, e):
  if c > (d + e):
    return True
  else:
    return False

c_greater_than_d_plus_e(5, 3, 1)
#result:
#True

c_greater_than_d_plus_e(5, 3, 1)
#result:
#False

def c_greater_than_d_plus_e(c, d, e):
  return c > (d + e)
#versione semplificata del codice che ho scritto su

c_greater_than_d_plus_e(5, 3, 1)
#result:
#True

c_greater_than_d_plus_e(5, 3, 1)
#result:
#False


'''
#XXXXX  LEZIONE AVANZATA SU LISTE E .APPEND  XXXXX
''' 

a = [1, 3, 5, 7, 9, 11]
#[2, 6, 10, 14, 22]
#funzione .append()

#diversi modi per usare la funz .append per aggiungere elementi in lista o crearne 

b = []
b.append(10)
print(b)
#result:
#b

c = []
for x in a:
  c.append(x*2)
print(c)
#result:
#[2, 6, 10, 14, 18, 22]

d = [x*2 for x in a]
print(d)
#result:
#[2, 6, 10, 14, 18, 22]


'''
#XXX ESERCIZIO XXX

'''

#crea una lista contenente questi numeri
#[1, 4, 9, 16, 25, 36]
e = []
for x in range(1,7):
  e.append(x**2)
print(e)
#result:
#[1, 4, 9, 16, 25, 36]

#crea una lista contenente questi numeri
#[36, 25, 16, 9, 4, 1]
for x in range(6, 0, -1):
  print(x)
#codice per creare una lista di numeri da 6 a 0, 6 escluso, in ordine decrescente '-1'

#result:
#6, 5, ,4, 3, 2, 1

f = []
for x in range(6, 0, -1):
  f.append(x**2)
print(f)
#result:
#[36, 25, 16, 9, 4, 1]

g = [x**2 for x in range(6, 0, -1)]
print(g)
#codice semplificato

#result:
#[36, 25, 16, 9, 4, 1]